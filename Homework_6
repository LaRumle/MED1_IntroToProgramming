Ball myFlower1;  // the first instance of the Object class. Global objects. 
Ball myFlower2;  // the second instance of the Object class
Ball myCircle1; // the third instance of the Object Class.
float a = random(255);

void setup() {
  size(1600, 1200);

  int _r1= 160; //radius of flower one's ellipses
  int _r2 = 100; //^^ flower 2
  int _r3 = 120; //radius of Circle1
  float _x=width/2; //starting point for x-value
  float _y=height/2; //starting point for y-value
  int _petals=7; //number of petals
  int _pc=#FFA000; //petals color in hexadecimal
  int _circleColor= #F5FC36; // 
  int offset = 350; //en konstant der bruges til at give afstand mellem blomsterne.
  float _speed1=2;
  float _speed2=5;
  float _speed3=6;


  myFlower1 = new Ball(_r1, _petals, _x, _y, _pc, _speed1); 
  myFlower2 = new Ball(_r2, _petals, _x+random(-500, 500), _y+offset, _pc, _speed2);
  myCircle1 = new Ball(_r3, _x, _y-offset, _circleColor, _speed3);
}

void draw() {
  background(#43AF76);
  if (myFlower1.overlaps(myCircle1)) {
    background (random(a),random(a),random(a));
  }

  myCircle1.displayCircle();
  myCircle1.move();
  myCircle1.bounce(2);
  myCircle1.mousePx();
  myCircle1.mousePy();
  myFlower1.displayFlower();
  myFlower1.move();  
  myFlower1.bounce(1);
  myFlower2.displayFlower();
  myFlower2.move();  
  myFlower2.bounce(1);
}

// Class for the Ball object - preferably in a new tab in Processing, but easier to put here after on GitHub.
class Ball {  // This class is for the yellow ball

  // Variables
  float speed; //Der blev lavet en speed variable så man kunne flytte på blomsten og sætte den til forskellig hastighed
  float ballX;
  float ballY;


  float r;       // radius of the flower petal
  int n_petals;  // number of petals 
  float x;       // x-position of the center of the flower
  float y;       // y-position of the center of the flower
  int petalColor;//hexadecimal number for the color of petals
  int circleColor; //hexadecimal number for the color of the circle


  //The constructor is a special function inside of a class that creates the instance of the object itself. 
  //It is where you give the instructions on how to set up the object
  //The name doesnt matter but it always have to have the same name as the class - In this case 'Ball'
  Ball(float temp_r, int temp_n_petals, float temp_x, float temp_y, int temp_petalColor, float temp_speed) {
    r=temp_r;
    n_petals = temp_n_petals;
    x=temp_x;
    y=temp_y;
    petalColor=temp_petalColor;
    speed = temp_speed;
  }
  
  //Circle object
  Ball(float temp_r, float temp_x, float temp_y, int temp_circleColor, float temp_speed){
  r=temp_r;
  x=temp_x;
  y=temp_y;
  speed=temp_speed;
  circleColor=temp_circleColor;
}

  void displayFlower () {
    fill(petalColor);
    for (float i=0; i<PI*2; i+=2*PI/n_petals) {
      ballX=x + r*cos(i);
      ballY=y + r*sin(i);
      ellipse(ballX, ballY, r, r);
    }
    fill(200, 0, 0);
    ellipse(x, y, r*1.2, r*1.2);
  }
  
  void displayCircle(){
    fill(circleColor);
    ellipse(x,y,r,r);
  }
    
  void move() {
    x = x + speed; 
  }
  
  //jeg har indsat variablen i, så man kan justere om hvor langt fra skærmkanterne objektet skal bounce. 
  //Blomster objekterne skal fx deles med 1, da de har blade og derfor skal bounce før centercirklen rammer skærmen. 
  //Cirklen derimod skal deles med sin 2 for at bounce på kanten.
  float bounce(int i) {
    if (x > width-r/i || x < r/i || y > height || y < 0) {
      speed = speed * (-1);
    }
    return speed;
  }

  boolean overlaps(Ball someOtherObject) {
    if (dist(x, y, someOtherObject.x, someOtherObject.y)<(r+someOtherObject.r))
    {
      return true;
    } 
    else
    {
      return false;
    }
  }
  
//credit to Atle for mousePressed floats, which makes an object follow the mouseX and mouseY positions, as long as mouse is pressed. 
float mousePx () {
  if (mousePressed) {
  x = mouseX;
}
  return x; //returns the initial x-value
}

float mousePy () {
  if (mousePressed) {
  y = mouseY;
}
  return y; //returns the initial x-value
}
}
